[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*"]

# MyPy configuration - currently relaxed for gradual typing adoption
[tool.mypy]
python_version = "2.5.13"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
ignore_errors = true  # Temporarily disable all type checking
exclude = [
    "migrations/", "venv/", ".venv/", "scripts/", "tests/",
    "backend/services/european_mappings.py",
    "backend/services/ticker_search.py",
    "backend/services/isin_prototype.py",
    "backend/services/german_data_providers.py",
    "backend/schemas/isin.py",
    "frontend/"
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "backend.services.european_mappings",
    "backend.services.ticker_search",
    "backend.services.isin_prototype",
    "backend.services.german_data_providers",
    "backend.services.enhanced_market_data",
    "backend.schemas.isin",
    "backend.tasks.*",
    "frontend.*",
    "scripts.*"
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "2.5.13"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--durations=10",
    "-ra",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "error::pytest.PytestConfigWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend", "frontend", "mcp_server"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/config/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
# Same line length as Black
line-length = 88

# Python 3.11
target-version = "2.5.13"

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    "htmlcov",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
]

# Allow fix for all enabled rules
fix = true

[tool.ruff.lint]
# Enable comprehensive rule sets for the newer Ruff version
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC", # flake8-async
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "AIR",  # Airflow
    "PERF", # Perflint
    "FURB", # refurb
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that might be too strict for this project
ignore = [
    # Docstring rules - too strict for existing codebase
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line

    # Type annotation rules - gradually adopt
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed

    # Security rules that might be too strict
    "S101", # Use of assert detected
    "S603", # subprocess call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
    "S608", # Possible SQL injection vector through string-based query construction

    # Style preferences
    "B008", # Do not perform function call in argument defaults
    "COM812", # Missing trailing comma
    "ISC001", # Implicitly concatenated string literals on one line
    "Q000", # Single quotes found but double quotes preferred

    # Complexity rules - adjust as needed
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison

    # Django-specific rules (if not using Django)
    "DJ001", # Avoid using null=True on string-based fields

    # Rules that conflict with Black
    "E501", # Line too long (handled by Black/Ruff formatter)

    # Airflow rules (if not using Airflow)
    "AIR001", # Variable name should be in SCREAMING_SNAKE_CASE

    # Additional rules to reduce noise during development
    "TRY301", # Abstract `raise` to an inner function - too verbose
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "ARG001", # Unused function argument (common in FastAPI dependencies)
    "SLF001", # Private member accessed (common in service layers)
    "BLE001", # Do not catch blind exception: `Exception` (sometimes necessary)
    "RUF001", # String contains ambiguous unicode characters (test data)
    "B904",   # Within an `except` clause, raise exceptions with `raise ...`
    "RET504", # Unnecessary variable assignment before `return` statement
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",   # Function is too complex
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN205", # Missing return type annotation for staticmethod
    "ANN206", # Missing return type annotation for classmethod
    "TRY400", # Use `logging.exception` instead of `logging.error`
    "TRY300", # Consider moving this statement to an `else` block
    "G004",   # Logging statement uses f-string
    "ARG002", # Unused method argument
    "S106",   # Possible hardcoded password assigned to argument
    "PT011",  # `pytest.raises(Exception)` is too broad
    "INP001", # File is part of an implicit namespace package
    "B007",   # Loop control variable not used within loop body
    "DTZ005", # `datetime.datetime.now()` called without a `tz` argument
    "DTZ011", # `datetime.date.today()` used
    "RUF013", # PEP 484 prohibits implicit `Optional`

    # Additional common patterns to ignore for now
    "T201",   # print statements (useful for scripts and debugging)
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal
    "EM102",  # Exception must not use an f-string literal
    "E402",   # Module level import not at top of file (needed for path manipulation)
    "S105",   # Possible hardcoded password (many false positives in tests)
    "PTH123", # `open()` should be replaced by `Path.open()`
    "F841",   # Local variable is assigned to but never used
    "C408",   # Unnecessary collection call
    "PERF401", # Manual list comprehension
    "RUF012", # Mutable class default
    "D417",   # Missing argument descriptions in docstring
    "FBT002", # Boolean default value in function definition
    "PD901",  # Avoid using the generic variable name `df` for DataFrames
    "NPY002", # Replace legacy `np.random.seed` usage with `np.random.Generator`
    "SIM102", # Use a single if-statement instead of nested if-statements
    "D415",   # First line should end with a period, question mark, or exclamation point
    "DTZ003", # `datetime.datetime.utcnow()` is deprecated
    "S110",   # `try`-`except`-`pass` detected, consider logging the exception
    "C401",   # Unnecessary generator (rewrite as a set comprehension)

    # Additional issues for gradual fixing
    "N818",   # Exception name should be named with an Error suffix
    "A001",   # Variable is shadowing a Python builtin
    "A002",   # Function argument is shadowing a Python builtin
    "PLW2901", # `for` loop variable overwritten by assignment target
    "SIM108", # Use ternary operator instead of if-else-block
    "PLR0206", # Cannot have defined parameters for properties
    "PLW0603", # Using the global statement is discouraged
    "F821",   # Undefined name (often due to import issues)
    "LOG015", # Use own logger instead of root logger
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S314",   # Using `xml` to parse untrusted data is vulnerable
    "S104",   # Possible binding to all interfaces (needed for Docker)
    "D205",   # 1 blank line required between summary line and description
    "PT012",  # `pytest.raises()` block should contain a single simple statement
    "B017",   # Do not assert blind exception
    "N806",   # Variable in function should be lowercase
    "ERA001", # Found commented-out code
    "SIM105", # Use `contextlib.suppress(Exception)` instead of try-except-pass
    "E722",   # Do not use bare `except`

    # Additional for pre-commit compatibility
    "TRY401", # Redundant exception object included in `logging.exception` call
    "SIM117", # Use a single `with` statement with multiple contexts
    "PTH109", # `os.getcwd()` should be replaced by `Path.cwd()`
    "G201",   # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    "DTZ001", # `datetime.datetime()` called without a `tzinfo` argument
    "ASYNC230", # blocking-open-call-in-async-function
    "G003",   # logging-string-concat
]

fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, etc.
"tests/*" = ["PLR2004", "S101", "D", "ANN", "PLC0415"]
# Migration files can be more lenient
"*/migrations/*" = ["D", "N999", "E501"]
# Config files can have broader imports
"*/config/*" = ["F401", "E402"]
# Init files can have unused imports
"*/__init__.py" = ["F401", "D104"]
# Scripts can be less strict
"scripts/*" = ["T201", "S603", "S607", "PLC0415"]
# Archive/test files can be less strict
"archive/*" = ["PLC0415", "T201", "S603", "S607"]
# API files can have imports in exception handlers and functions
"backend/api/*" = ["PLC0415"]
# Core files can have imports in functions for optional imports
"backend/core/*" = ["PLC0415"]
# Main app can have imports in health checks
"backend/main.py" = ["PLC0415"]
# Models can have import formatting handled by standalone isort and optional imports
"backend/models/*" = ["I001", "PLC0415"]
# Schemas can have imports in validators
"backend/schemas/*" = ["PLC0415"]
# Backend services can have imports in functions for circular imports and optional imports
"backend/services/*" = ["PLC0415"]
# Backend tasks can have imports in functions
"backend/tasks/*" = ["PLC0415"]
# Frontend can have imports in functions for optional imports
"frontend/*" = ["PLC0415", "FURB162"]
# Middleware can have logging patterns
"backend/middleware/*" = ["PLC0415", "LOG014"]
# MCP server can have imports in functions
"mcp_server/*" = ["PLC0415"]

[tool.ruff.lint.isort]
# Use the same configuration as the standalone isort
# Force separate lines for different import types
force-single-line = false
split-on-trailing-comma = true
force-sort-within-sections = true
known-first-party = ["backend", "frontend", "mcp_server"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-type-checking]
strict = false

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "financial-dashboard-mcp"
version = "2.5.13"
description = "A production-ready financial dashboard with AI integration, zero technical debt, and streamlined dependencies"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.109.0",
    "streamlit>=1.29.0",
    "sqlalchemy>=2.0.25",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "yfinance>=0.2.18",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.1",
    "uvicorn>=0.25.0",
    "pydantic>=2.5.3",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
monitoring = [
    "flower>=2.0.1",  # Celery monitoring dashboard
]
ai = [
    "mcp>=1.0.0",  # Model Context Protocol for AI integration (Phase 3)
]

[project.scripts]
financial-dashboard-mcp = "mcp_server.run:main_entry"

[tool.setuptools.packages.find]
include = ["backend*", "frontend*", "mcp_server*"]
exclude = ["tests*", "docs*", "docker*", "database*"]

# Commitizen configuration for semantic versioning
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = false
changelog_file = "CHANGELOG.md"
changelog_format = "%(version)s (%(date)s)"
changelog_pattern = "^(feat|fix|refactor|perf|style|test|build|ci|docs|chore)?(\\(.+\\))?(!)?"
changelog_start_rev = "v1.0.0"
style = [
    [
        "qmark",
        "fg:#ff9d00 bold",
    ],
    [
        "question",
        "bold",
    ],
    [
        "answer",
        "fg:#ff9d00 bold",
    ],
    [
        "pointer",
        "fg:#ff9d00 bold",
    ],
    [
        "highlighted",
        "fg:#ff9d00 bold",
    ],
    [
        "selected",
        "fg:#cc5454",
    ],
    [
        "separator",
        "fg:#cc5454",
    ],
    [
        "instruction",
        "",
    ],
    [
        "text",
        "",
    ],
    [
        "disabled",
        "fg:#858585 italic",
    ],
]

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["backend/__init__.py:__version__"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = false
remove_dist = false
patch_without_tag = false
changelog_sections = "feature,fix,breaking,documentation,performance,refactor"
commit_version_number = true

[tool.semantic_release.changelog]
template_dir = ".github/templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

# Bumpversion configuration (alternative to semantic-release)
[tool.bumpversion]
current_version = "2.5.13"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "chore: bump version {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "2.5.13"'
replace = 'version = "2.5.13"'

[[tool.bumpversion.files]]
filename = "backend/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = "## [Unreleased]\n\n## [{new_version}] - {now:%Y-%m-%d}"

[tool.bandit]
exclude_dirs = ["tests", "migrations", ".venv", "venv"]
skips = [
    "B101", # assert_used - skip for tests
    "B601", # shell_injection_subprocess - skip for tests
    "B404", # subprocess import - needed for service management
    "B603", # subprocess_without_shell_equals_true - safer than shell=True
    "B607", # start_process_with_partial_path - controlled commands only
    "B104", # hardcoded_bind_all_interfaces - development only
] # Skip common false positives for development tooling

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Financial-specific security checks
[tool.bandit.hardcoded_password_string]
word_list = ["password", "pass", "pwd", "token", "secret", "key", "api_key"]

[tool.bandit.hardcoded_sql_expressions]
confidence = "HIGH"
severity = "MEDIUM"
