[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
exclude = ["migrations/", "venv/", ".venv/", "tests/"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=backend",
    "--cov=frontend",
    "--cov=mcp_server",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend", "frontend", "mcp_server"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/config/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".venv",
    "venv",
    "migrations",
    "__pycache__",
    ".git",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "S101",    # Use of assert
    "B008",    # Do not perform function calls in argument defaults
    "S104",    # Possible binding to all interfaces (0.0.0.0 is OK for dev)
    "S105",    # Possible hardcoded password (OK for dev tokens)
    "PLR2004", # Magic value used in comparison (OK for HTTP status codes)
    "ERA001",  # Found commented-out code (OK for TODO comments)
    "F841",    # Local variable assigned but never used (OK for prototype code)
    "RUF001",  # String contains ambiguous unicode (OK for UI symbols)
    "DTZ005",  # datetime.now() without timezone (OK for simple logging)
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "financial-dashboard-mcp"
version = "0.2.0"
description = "A hybrid financial dashboard with AI agent integration and task queue system"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.109.0",
    "streamlit>=1.29.0",
    "sqlalchemy>=2.0.25",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "flower>=2.0.1",
    "yfinance>=0.2.18",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.1",
    "uvicorn>=0.25.0",
    "pydantic>=2.5.3",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[tool.setuptools.packages.find]
include = ["backend*", "frontend*", "mcp_server*"]
exclude = ["tests*", "docs*", "docker*", "database*"]
