[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*"]

[tool.mypy]
python_version = "1.4.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
exclude = ["migrations/", "venv/", ".venv/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "1.4.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--durations=10",
    "-ra",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "error::pytest.PytestConfigWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "financial: marks tests as financial calculation tests",
    "security: marks tests as security tests",
    "mcp: marks tests as MCP server tests",
    "api: marks tests as API tests",
    "database: marks tests as database tests",
    "redis: marks tests as Redis tests",
    "celery: marks tests as Celery task tests",
    "external: marks tests that require external services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend", "frontend", "mcp_server"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/config/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "1.4.0"
exclude = [
    ".venv",
    "venv",
    "migrations",
    "__pycache__",
    ".git",
    "build",
    "dist",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "financial-dashboard-mcp"
version = "1.4.0"
description = "A production-ready financial dashboard with AI integration, zero technical debt, and streamlined dependencies"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.109.0",
    "streamlit>=1.29.0",
    "sqlalchemy>=2.0.25",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "flower>=2.0.1",
    "yfinance>=0.2.18",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.1",
    "uvicorn>=0.25.0",
    "pydantic>=2.5.3",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[tool.setuptools.packages.find]
include = ["backend*", "frontend*", "mcp_server*"]
exclude = ["tests*", "docs*", "docker*", "database*"]

# Commitizen configuration for semantic versioning
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = false
changelog_file = "CHANGELOG.md"
changelog_format = "%(version)s (%(date)s)"
changelog_pattern = "^(feat|fix|refactor|perf|style|test|build|ci|docs|chore)?(\\(.+\\))?(!)?"
changelog_start_rev = "v1.0.0"
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["backend/__init__.py:__version__"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = false
remove_dist = false
patch_without_tag = false
changelog_sections = "feature,fix,breaking,documentation,performance,refactor"
commit_version_number = true

[tool.semantic_release.changelog]
template_dir = ".github/templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

# Bumpversion configuration (alternative to semantic-release)
[tool.bumpversion]
current_version = "1.4.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "chore: bump version {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "1.4.0"'
replace = 'version = "1.4.0"'

[[tool.bumpversion.files]]
filename = "backend/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = "## [Unreleased]\n\n## [{new_version}] - {now:%Y-%m-%d}"

[tool.bandit]
exclude_dirs = ["tests", "migrations", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess for tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Financial-specific security checks
[tool.bandit.hardcoded_password_string]
word_list = ["password", "pass", "pwd", "token", "secret", "key", "api_key"]

[tool.bandit.hardcoded_sql_expressions]
confidence = "HIGH"
severity = "MEDIUM"
