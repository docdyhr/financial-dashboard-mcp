name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🎨 Run Code Formatters
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: 🔍 Run Linters
        run: |
          ruff check .
          flake8 .

      - name: 🏷️ Run Type Checking
        run: |
          mypy backend/ --ignore-missing-imports

  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_financial_dashboard
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Set up Environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_financial_dashboard" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env

      - name: 🗃️ Run Database Migrations
        run: |
          alembic upgrade head

      - name: 🧪 Run Tests
        run: |
          pytest --cov=backend --cov=frontend --cov=mcp_server --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: 🔒 Run Security Checks
        run: |
          bandit -r backend/ mcp_server/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        image: [backend, frontend, mcp]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.image }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  commitlint:
    name: 📝 Commit Message Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check Commit Messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

  validate-release:
    name: 🎯 Validate Release Readiness
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Semantic Release
        run: |
          pip install python-semantic-release[github]==8.7.0

      - name: 🔍 Check Release Conditions
        run: |
          # Dry run to check what would be released
          semantic-release version --print > next_version.txt
          if [ -s next_version.txt ]; then
            echo "✅ Release conditions met. Next version: $(cat next_version.txt)"
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          else
            echo "ℹ️ No release needed based on commit history"
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: 📊 Create Release Summary
        run: |
          echo "## 🎯 Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ env.SHOULD_RELEASE }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.SHOULD_RELEASE }}" = "true" ]; then
            echo "**Next Version:** $(cat next_version.txt)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ All checks passed:" >> $GITHUB_STEP_SUMMARY
            echo "- Code quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- Test suite" >> $GITHUB_STEP_SUMMARY
            echo "- Security scans" >> $GITHUB_STEP_SUMMARY
            echo "- Release conditions validated" >> $GITHUB_STEP_SUMMARY
          fi
