[tool:pytest]
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
minversion = 6.0
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --color=yes
    --cov=backend
    --cov=frontend
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --maxfail=5
    --disable-warnings
    --ignore=archive
    --ignore=scripts
    -ra
markers =
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test multiple components together
    api: API endpoint tests
    frontend: Frontend component tests
    slow: Tests that take more than 5 seconds to run
    fast: Tests that run quickly (under 1 second)
    database: Tests that require database access
    external: Tests that make external API calls
    benchmark: Performance benchmark tests
    regression: Regression tests for previously fixed bugs
    smoke: Basic smoke tests for critical functionality
    isin: Tests specifically for ISIN functionality
    sync: Tests for ISIN sync service
    validation: Tests for ISIN validation
    mapping: Tests for ISIN mapping functionality
    portfolio: Tests for portfolio functionality
    market_data: Tests for market data functionality
    auth: Authentication and authorization tests
    security: Security-related tests
    performance: Performance and load tests
    config: Configuration and environment tests
    mock: Tests that use extensive mocking
    real_data: Tests that use real external data
    celery: Tests for Celery background tasks
    redis: Tests that require Redis
    cache: Tests for caching functionality
    error_handling: Tests for error handling scenarios
    edge_case: Tests for edge cases and boundary conditions
    happy_path: Tests for normal operation scenarios
    financial: Tests for financial calculations and data tests
timeout = 300
timeout_method = thread
asyncio_mode = auto
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*ssl.*:Warning
    ignore:.*InsecureRequestWarning.*:urllib3.exceptions.InsecureRequestWarning
env =
    ENVIRONMENT = test
    DATABASE_URL = sqlite:///:memory:
    REDIS_URL = redis://localhost:6379/15
    SECRET_KEY = test-secret-key-for-financial-dashboard
    DEBUG = true
    TESTING = true
    LOG_LEVEL = ERROR
    DISABLE_AUTH = true
    CELERY_TASK_ALWAYS_EAGER = true
    CELERY_TASK_EAGER_PROPAGATES = true
log_cli = false
log_cli_level = ERROR
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S
collect_ignore =
    setup.py
    migrations/
    venv/
    .venv/
    node_modules/
    dist/
    build/
    .git/
    __pycache__/
    *.egg-info/
    archive/
    scripts/
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
