services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL_FILE=/run/secrets/db_url
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    secrets:
      - db_url
      - secret_key
      - flower_password
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    networks:
      - app-network

  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    ports:
      - "8501:8501"
    networks:
      - app-network

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    command: celery -A backend.tasks worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL_FILE=/run/secrets/db_url
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    secrets:
      - db_url
      - secret_key
    depends_on:
      - db
      - redis
    networks:
      - app-network

  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    command: celery -A backend.tasks beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL_FILE=/run/secrets/db_url
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    secrets:
      - db_url
      - secret_key
    depends_on:
      - db
      - redis
    networks:
      - app-network

  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    command: sh -c 'celery -A backend.tasks flower --basic_auth=admin:$(cat /run/secrets/flower_password)'
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/0
    secrets:
      - flower_password
    depends_on:
      - redis
    ports:
      - "5555:5555"
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=financial_dashboard
    secrets:
      - db_user
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: sh -c 'redis-server --requirepass $(cat /run/secrets/redis_password)'
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mcp_server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL_FILE=/run/secrets/db_url
      - BACKEND_URL=http://backend:8000
      - MCP_AUTH_TOKEN_FILE=/run/secrets/mcp_auth_token
    secrets:
      - db_url
      - mcp_auth_token
    depends_on:
      - backend
    ports:
      - "8502:8502"
    networks:
      - app-network

secrets:
  db_url:
    external: true
  db_user:
    external: true
  db_password:
    external: true
  secret_key:
    external: true
  flower_password:
    external: true
  redis_password:
    external: true
  mcp_auth_token:
    external: true

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
